// Code generated by MockGen. DO NOT EDIT.
// Source: channel.go
//
// Generated by this command:
//
//	mockgen -package=mocks -destination=mocks/channel.mock.go -source=channel.go IChannel
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	notifier "github.com/ecodeclub/notify-go/pkg/notifier"
	gomock "go.uber.org/mock/gomock"
)

// MockIChannel is a mock of IChannel interface.
type MockIChannel struct {
	ctrl     *gomock.Controller
	recorder *MockIChannelMockRecorder
}

// MockIChannelMockRecorder is the mock recorder for MockIChannel.
type MockIChannelMockRecorder struct {
	mock *MockIChannel
}

// NewMockIChannel creates a new mock instance.
func NewMockIChannel(ctrl *gomock.Controller) *MockIChannel {
	mock := &MockIChannel{ctrl: ctrl}
	mock.recorder = &MockIChannelMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIChannel) EXPECT() *MockIChannelMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockIChannel) Execute(ctx context.Context, deli notifier.Delivery) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, deli)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockIChannelMockRecorder) Execute(ctx, deli any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockIChannel)(nil).Execute), ctx, deli)
}

// Name mocks base method.
func (m *MockIChannel) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockIChannelMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockIChannel)(nil).Name))
}
